{"version":3,"file":"index.js","sources":["../../src/theme/index.ts","../../src/theme/fonts.tsx","../../src/components/Icon/index.tsx","../../src/components/IconButton/index.tsx","../../src/index.ts","../../src/utils/colors.ts","../../src/components/ColorModeSwitcher/index.tsx","../../src/components/ThemeProvider/index.tsx"],"sourcesContent":["import { extendTheme, Theme, theme as baseTheme } from '@chakra-ui/react'\n\nimport { Leaves } from '../utils/types'\n\n// Custom config for theme\nexport const customTheme: Theme = {\n  direction: 'ltr',\n  config: {\n    ...baseTheme.config,\n    initialColorMode: 'light',\n    useSystemColorMode: true\n  },\n  styles: {\n    ...baseTheme.styles\n  },\n  colors: {\n    ...baseTheme.colors\n  },\n  semanticTokens: {\n    ...baseTheme.semanticTokens\n  },\n  shadows: {\n    ...baseTheme.shadows\n  },\n  radii: {\n    ...baseTheme.radii\n  },\n  sizes: {\n    ...baseTheme.sizes\n  },\n  space: {\n    ...baseTheme.space\n  },\n  transition: {\n    ...baseTheme.transition\n  },\n  blur: {\n    ...baseTheme.blur\n  },\n  borders: {\n    ...baseTheme.borders\n  },\n  breakpoints: {\n    ...baseTheme.breakpoints\n  },\n  fonts: {\n    ...baseTheme.fonts,\n    heading: `roboto, sans-serif`,\n    body: `roboto, sans-serif`\n  },\n  fontSizes: {\n    ...baseTheme.fontSizes\n  },\n  fontWeights: {\n    ...baseTheme.fontWeights\n  },\n  lineHeights: {\n    ...baseTheme.lineHeights\n  },\n  letterSpacings: {\n    ...baseTheme.letterSpacings\n  },\n  zIndices: {\n    ...baseTheme.zIndices\n  },\n  components: {\n    ...baseTheme.components\n  }\n}\n\n// Theme types\nexport type ColorsNames = Leaves<typeof customTheme['colors']>\nexport type ShadowsNames = Leaves<typeof customTheme['shadows']>\nexport type RadiiNames = Leaves<typeof customTheme['radii']>\nexport type SizesNames = Leaves<typeof customTheme['sizes']>\nexport type SpaceNames = Leaves<typeof customTheme['space']>\nexport type TransitionNames = Leaves<typeof customTheme['transition']>\nexport type BlurNames = Leaves<typeof customTheme['blur']>\nexport type BordersNames = Leaves<typeof customTheme['borders']>\nexport type BreakpointsNames = Leaves<typeof customTheme['breakpoints']>\nexport type FontSizesNames = Leaves<typeof customTheme['fontSizes']>\nexport type FontWeightsNames = Leaves<typeof customTheme['fontWeights']>\nexport type LineHeightsNames = Leaves<typeof customTheme['lineHeights']>\nexport type LetterSpacingsNames = Leaves<typeof customTheme['letterSpacings']>\nexport type ZIndicesNames = Leaves<typeof customTheme['zIndices']>\n\n// Theme override\nconst theme = extendTheme(customTheme)\n\nexport default theme\n","import { Global } from '@emotion/react'\nimport React from 'react'\n\nconst Fonts = () => (\n  <Global\n    styles={`\n      /* latin */\n      @font-face {\n        font-family: 'roboto';\n        src: url('../assets/fonts/roboto-bold/roboto-bold.woff2?#iefix') format('woff2'),\n             url('../assets/fonts/roboto-bold/roboto-bold.woff') format('woff'),\n             url('../assets/fonts/roboto-bold/roboto-bold.ttf') format('truetype');\n        font-weight: 700;\n        font-style: normal;\n        font-display: swap;\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n      /* latin */\n      @font-face {\n        font-family: 'roboto';\n        src: url('../assets/fonts/roboto-regular/roboto-regular.woff2?#iefix') format('woff2'),\n             url('../assets/fonts/roboto-regular/roboto-regular.woff') format('woff'),\n             url('../assets/fonts/roboto-regular/roboto-regular.ttf') format('truetype');\n        font-weight: 400;\n        font-style: normal;\n        font-display: swap;\n        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;\n      }\n    `}\n  />\n)\n\nexport default Fonts\n","import React from 'react'\nimport { IconBaseProps, IconType } from 'react-icons'\nimport * as FaIcons from 'react-icons/fa'\nimport * as FiIcons from 'react-icons/fi'\nimport * as MdIcons from 'react-icons/md'\nimport theme, { ColorsNames, SpaceNames } from 'theme'\n\nexport type MdIconNames = keyof typeof MdIcons\nexport type FaIconNames = keyof typeof FaIcons\nexport type FiIconNames = keyof typeof FiIcons\n\nexport type IconSizes = 'xs' | 'sm' | 'md' | 'lg'\nexport type IconsProps<T> = IconBaseProps & {\n  name: T\n  color?: ColorsNames\n  size?: IconSizes\n  onClick?: () => void\n  marginLeft?: SpaceNames\n  marginRight?: SpaceNames\n  marginTop?: SpaceNames\n  marginBottom?: SpaceNames\n  marginX?: SpaceNames\n  marginY?: SpaceNames\n  paddingLeft?: SpaceNames\n  paddingRight?: SpaceNames\n  paddingTop?: SpaceNames\n  paddingBottom?: SpaceNames\n  paddingX?: SpaceNames\n  paddingY?: SpaceNames\n}\n\nexport type MdIconsProps = IconsProps<MdIconNames>\nexport type FaIconsProps = IconsProps<FaIconNames>\nexport type FiIconsProps = IconsProps<FiIconNames>\n\nexport const iconSizesMap = new Map<IconSizes, string>([\n  ['xs', '0.75rem'],\n  ['sm', '1rem'],\n  ['md', '1.5rem'],\n  ['lg', '2rem']\n])\n\nexport function iconBuilder<T>(\n  props: IconsProps<T>,\n  reactIcons: {\n    [name: string]: IconType\n  }\n) {\n  const Icon = reactIcons[props.name as string]\n  const themeColor = theme.colors[props.color ?? 'black']\n  const iconSize = iconSizesMap.get(props.size ?? 'md') ?? '1rem'\n\n  return (\n    <Icon\n      {...props}\n      color={themeColor}\n      size={iconSize}\n      cursor={props.onClick ? 'pointer' : undefined}\n    />\n  )\n}\n\nexport const MdIcon = (props: MdIconsProps) => {\n  return iconBuilder<MdIconNames>(props, MdIcons)\n}\n\nexport const FaIcon = (props: FaIconsProps) => {\n  return iconBuilder<FaIconNames>(props, FaIcons)\n}\n\nexport const FiIcon = (props: FiIconsProps) => {\n  return iconBuilder<FiIconNames>(props, FiIcons)\n}\n","import {\n  IconButton as ChakraIconButton,\n  IconButtonProps as ChakraIconButtonProps\n} from '@chakra-ui/react'\n\nexport type IconButtonProps = ChakraIconButtonProps\nexport const IconButton = ChakraIconButton\n","import { rgba } from './utils/colors'\n\n// Utils\nexport const utils = {\n  rgba\n}\n\n// Types\nexport type { ResponsiveValue } from '@chakra-ui/react'\n\n// Hooks\nexport {\n  useColorMode,\n  useColorModeValue,\n  useBreakpoint,\n  useBreakpointValue,\n  useMediaQuery,\n  useOutsideClick,\n  useClipboard,\n  useDisclosure,\n  useBoolean,\n  useToken,\n  useNumberInput,\n  useEditableControls\n} from './hooks'\n\n// Theme\nexport { customTheme as theme } from './theme'\nexport { ThemeProvider, IThemeProvider } from './components/ThemeProvider'\nexport type {\n  BlurNames,\n  BordersNames,\n  BreakpointsNames,\n  ColorsNames,\n  FontSizesNames,\n  FontWeightsNames,\n  LetterSpacingsNames,\n  LineHeightsNames,\n  RadiiNames,\n  ShadowsNames,\n  SizesNames,\n  SpaceNames,\n  TransitionNames,\n  ZIndicesNames\n} from './theme'\n\n// Components\nexport {\n  ColorModeSwitcher,\n  ColorModeSwitcherProps\n} from './components/ColorModeSwitcher'\nexport {\n  FaIcon,\n  MdIcon,\n  FiIcon,\n  MdIconsProps,\n  FaIconsProps,\n  FiIconsProps\n} from './components/Icon'\nexport { IconButton, IconButtonProps } from './components/IconButton'\n","export function rgba(hex: string, alpha?: number) {\n  const r = parseInt(hex.slice(1, 3), 16)\n  const g = parseInt(hex.slice(3, 5), 16)\n  const b = parseInt(hex.slice(5, 7), 16)\n\n  if (alpha) {\n    return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + alpha + ')'\n  }\n  return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n}\n","import React from 'react'\n\nimport { useColorMode, useColorModeValue } from '../../hooks'\nimport { FaIcon } from '../Icon'\nimport { IconButton, IconButtonProps } from '../IconButton'\n\nexport type ColorModeSwitcherProps = Omit<IconButtonProps, 'aria-label'>\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = props => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue('dark', 'light')\n  const iconName = useColorModeValue('FaMoon', 'FaSun')\n\n  return (\n    <IconButton\n      size=\"md\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<FaIcon name={iconName} size=\"md\" />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import { ChakraProvider } from '@chakra-ui/react'\nimport React from 'react'\n\nimport theme from '../../theme'\nimport Fonts from '../../theme/fonts'\n\nexport type IThemeProvider = React.FC<{ children: React.ReactNode }>\n\nexport const ThemeProvider: IThemeProvider = ({ children }) => (\n  <ChakraProvider theme={theme} resetCSS>\n    <Fonts />\n    {children}\n  </ChakraProvider>\n)\n"],"names":["customTheme","direction","config","Object","assign","baseTheme","initialColorMode","useSystemColorMode","styles","colors","semanticTokens","shadows","radii","sizes","space","transition","blur","borders","breakpoints","fonts","heading","body","fontSizes","fontWeights","lineHeights","letterSpacings","zIndices","components","theme","extendTheme","Fonts","React","createElement","Global","iconSizesMap","Map","iconBuilder","props","reactIcons","Icon","name","themeColor","_a","color","iconSize","_c","get","_b","size","cursor","onClick","undefined","FaIcon","FaIcons","IconButton","ChakraIconButton","utils","rgba","hex","alpha","r","parseInt","slice","g","b","toggleColorMode","useColorMode","text","useColorModeValue","iconName","variant","marginLeft","icon","FiIcons","MdIcons","children","ChakraProvider","resetCSS"],"mappings":"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"}